<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.dematic.labs</groupId>
    <artifactId>dsp</artifactId>
    <version>0.1.2-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Data Streaming Pipeline Sandbox</name>

    <scm>
        <developerConnection>scm:git:git@gitlab.ops.cld:Dematiclabs/dsp.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <scala.major.minor.version>2.11.8</scala.major.minor.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- common dependencies -->
            <dependency>
                <groupId>com.dematic.labs.toolkit.bom</groupId>
                <artifactId>common-dep</artifactId>
                <version>2.0.2</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- big data common dependencies -->
            <dependency>
                <groupId>com.dematic.labs.toolkit_bigdata.bom</groupId>
                <artifactId>bigdata-dep</artifactId>
                <version>1.0.11</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>

      </dependencyManagement>

    <dependencies>
        <!-- dlabs dependencies -->
        <dependency>
            <groupId>com.dematic.labs.toolkit_bigdata</groupId>
            <artifactId>simulators</artifactId>
            <version>1.0.11</version>
        </dependency>
        <!-- spark sql/data frames/data sets -->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_2.11</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql-kafka-0-10_2.11</artifactId>
        </dependency>
        <!-- spark streaming dependencies -->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-streaming_2.11</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-streaming-kafka-0-10_2.11</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-avro</artifactId>
        </dependency>
        <!-- kafka support -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.11</artifactId>
        </dependency>
        <!-- cassandra dependencies -->
        <dependency>
            <groupId>com.datastax.spark</groupId>
            <artifactId>spark-cassandra-connector_2.11</artifactId>
        </dependency>
        <!-- cassandra client utils -->
        <dependency>
            <groupId>org.apache.cassandra</groupId>
            <artifactId>cassandra-clientutil</artifactId>
        </dependency>
        <!-- cassandra client driver for java apps -->
        <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-core</artifactId>
        </dependency>
        <!-- configuration -->
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
        </dependency>

        <!-- utilities -->

        <!-- json dependencies -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>

        <!-- declare tests dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_2.11</artifactId>
        </dependency>
        <!-- kafka unit testing -->
        <dependency>
            <groupId>info.batey.kafka</groupId>
            <artifactId>kafka-unit</artifactId>
        </dependency>
        <!-- cassandra unit testing -->
        <dependency>
            <groupId>org.cassandraunit</groupId>
            <artifactId>cassandra-unit</artifactId>
        </dependency>

        <!-- prometheus monitoring -->
        <dependency>
            <groupId>com.dematic.labs.dsp.monitor</groupId>
            <artifactId>dsp-monitor</artifactId>
            <version>0.0.2-SNAPSHOT</version>

            <exclusions>
                <exclusion>
                    <groupId>io.prometheus</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.dropwizard.metrics</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>


    <!-- We use the maven-assembly plugin to create a fat jar that contains all dependencies
        except spark and its transitive dependencies. The resulting fat-jar can be executed
        on a cluster. Change the value of Program-Class if your program entry point changes. -->
    <build>
        <defaultGoal>clean install</defaultGoal>
        <plugins>
            <!-- We use the maven-shade plugin to create a fat jar that contains all dependencies
            except spark and it's transitive dependencies. The resulting fat-jar can be executed
            on a cluster. Change the value of Program-Class if your program entry point changes. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <!-- Run shade goal on package phase -->
                    <execution>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <artifactSet>
                                <excludes>
                                    <!-- Also exclude very big transitive dependencies

                                    WARNING: You have to remove these excludes if your code relies on other
                                    versions of these dependencies.

                                    -->
                                </excludes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <!-- Do not copy the signatures in the META-INF folder.
                                    Otherwise, this might cause SecurityExceptions when using the JAR. -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>attach-artifacts</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>src/main/resources/persister.cql</file>
                                    <type>cql</type>
                                    <classifier>persister</classifier>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- compile scala -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- test scala -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>1.0</version>
                <configuration>
                    <parallel>false</parallel>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
